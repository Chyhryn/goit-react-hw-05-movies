{"version":3,"file":"static/js/310.7460c2b7.chunk.js","mappings":"mNAGaA,EAAOC,EAAAA,GAAAA,GAAH,+FAOJC,GAAUD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,8OAePG,EAAWH,EAAAA,GAAAA,GAAH,iU,SCrBRI,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACR,EAAD,UACGM,EAAOG,KAAI,SAAAC,GAAK,aACf,SAACN,EAAD,WACE,SAACF,EAAD,CAASS,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAnD,mBACGG,EAAMK,aADT,QACkBL,EAAMM,QAFXN,EAAME,GADN,KAStB,C,yIChBYK,EAAahB,EAAAA,GAAAA,KAAH,gDAIViB,EAASjB,EAAAA,GAAAA,OAAH,+T,SCoCnB,EApCe,WACb,OAA0BkB,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOb,EAAP,KAAegB,EAAf,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAS,UAAGH,EAAOI,IAAI,gBAAd,QAA0B,GAEvB,KAAdD,IAIJE,EAAAA,EAAAA,IAAgBF,GAAWG,KAAKR,EACjC,GAAE,CAACE,IAYJ,OACE,iCACE,UAACP,EAAD,CAAYc,SARC,SAAAC,GACfA,EAAEC,iBAEFR,EAD2B,KAAVL,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAE9C,EAIG,WACE,kBAAOc,KAAK,OAAOC,SAbD,SAAAH,GACtBX,EAASW,EAAEI,cAAcC,MAC1B,KAYK,SAACnB,EAAD,CAAQgB,KAAK,SAAb,2BAED5B,IAAU,SAACD,EAAA,EAAD,CAAWC,OAAQA,MAGnC,C,+LCvCDgC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,sGAGrBF,EAAAA,EAAAA,IAAA,oCAAuCC,IAHlB,uBAErBE,EAFqB,EAE7BC,KAAQD,QAFqB,kBAIxBA,GAJwB,2CAAH,qDAOjBE,EAAY,mCAAG,WAAM/B,GAAN,yFACH0B,EAAAA,EAAAA,IAAA,iBACX1B,EADW,oBACG2B,EADH,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZb,EAAe,mCAAG,WAAMT,GAAN,yFAGnBkB,EAAAA,EAAAA,IAAA,gCACiBC,EADjB,kBACkCnB,EADlC,+CAHmB,uBAEnBqB,EAFmB,EAE3BC,KAAQD,QAFmB,kBAMtBA,GANsB,2CAAH,sDASfG,EAAY,mCAAG,WAAMhC,GAAN,yFAGhB0B,EAAAA,EAAAA,IAAA,iBAAoB1B,EAApB,4BAA0C2B,EAA1C,oBAHgB,uBAEhBM,EAFgB,EAExBH,KAAQG,KAFgB,kBAInBA,GAJmB,2CAAH,sDAOZC,EAAe,mCAAG,WAAMlC,GAAN,yFAGnB0B,EAAAA,EAAAA,IAAA,iBACE1B,EADF,4BACwB2B,EADxB,2BAHmB,uBAEnBE,EAFmB,EAE3BC,KAAQD,QAFmB,kBAMtBA,GANsB,2CAAH,qD","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  max-width: 400px;\n  list-style: none;\n`;\n\nexport const NavItem = styled(NavLink)`\n  display: inline-block;\n  padding: 10px;\n  width: 100%;\n  color: #000;\n  text-decoration: none;\n  font-weight: 500;\n\n  &:hover,\n  &focus {\n    color: #fff;\n    background-color: rgb(44, 128, 209);\n  }\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 10px;\n  overflow: hidden;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 2px rgba(44, 128, 209, 0.5);\n  -webkit-box-shadow: 0px 0px 2px 2px rgba(44, 128, 209, 0.5);\n  -moz-box-shadow: 0px 0px 2px 2px rgba(44, 128, 209, 0.5);\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, NavItem, ListItem } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <ListItem key={movie.id}>\n          <NavItem to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title ?? movie.name}\n          </NavItem>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  margin-bottom: 10px;\n`;\n\nexport const Button = styled.button`\nmargin-left: 5px;\npadding: 2px 5px;\nborder: none;\n\nbox-shadow: 0px 0px 2px 1px rgba(0,0,0,0.5);\n-webkit-box-shadow: 0px 0px 2px 1px rgba(0,0,0,0.5);\n-moz-box-shadow: 0px 0px 2px 1px rgba(0,0,0,0.5);\n  \n\n  &:hover,\n  &focus {\n   color: #fff;\n    background-color: rgb(44, 128, 209);\n`;\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { useState, useEffect } from 'react';\nimport { getMovieByQuery } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchForm, Button } from './Movies.styled';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState(null);\n  const [params, setParams] = useSearchParams();\n\n  useEffect(() => {\n    const movieName = params.get('query') ?? '';\n\n    if (movieName === '') {\n      return;\n    }\n\n    getMovieByQuery(movieName).then(setMovies);\n  }, [params]);\n\n  const onChangeHandler = e => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newQuery = query !== '' ? { query } : {};\n    setParams(newQuery);\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={onSubmit}>\n        <input type=\"text\" onChange={onChangeHandler} />\n        <Button type=\"submit\">Find Movie</Button>\n      </SearchForm>\n      {movies && <MovieList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a0ca7f55ad45082e1adc2f62ff95899a';\n\nexport const getTrandingMovies = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n  return results;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return results;\n};\n\nexport const getMovieCast = async id => {\n  const {\n    data: { cast },\n  } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  return cast;\n};\n\nexport const getMovieReviews = async id => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return results;\n};\n"],"names":["List","styled","NavItem","NavLink","ListItem","MovieList","movies","location","useLocation","map","movie","to","id","state","from","title","name","SearchForm","Button","useState","query","setQuery","setMovies","useSearchParams","params","setParams","useEffect","movieName","get","getMovieByQuery","then","onSubmit","e","preventDefault","type","onChange","currentTarget","value","axios","API_KEY","getTrandingMovies","results","data","getMovieById","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}